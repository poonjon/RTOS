

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Nov 03 13:45:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           	psect	idataCOMRAM
    30  0005BC                     __pidataCOMRAM:
    31                           	opt stack 0
    32                           
    33                           ;initializer for _number
    34  0005BC  EE                 	db	238
    35  0005BD  82                 	db	130
    36  0005BE  DC                 	db	220
    37  0005BF  D6                 	db	214
    38  0005C0  B2                 	db	178
    39  0005C1  76                 	db	118
    40  0005C2  7E                 	db	126
    41  0005C3  C2                 	db	194
    42  0005C4  FE                 	db	254
    43  0005C5  F2                 	db	242
    44  0005C6  FA                 	db	250
    45  0005C7  3E                 	db	62
    46  0005C8  6C                 	db	108
    47  0005C9  9E                 	db	158
    48  0005CA  7C                 	db	124
    49  0005CB  78                 	db	120
    50  0000                     _INTCONbits	set	4082
    51  0000                     _OSCCONbits	set	4051
    52  0000                     _PIE1bits	set	3997
    53  0000                     _PIR1bits	set	3998
    54  0000                     _PORTCbits	set	3970
    55  0000                     _PORTDbits	set	3971
    56  0000                     _RCREG	set	4014
    57  0000                     _RCSTA	set	4011
    58  0000                     _RCSTAbits	set	4011
    59  0000                     _SPBRG	set	4015
    60  0000                     _SPBRGH	set	4016
    61  0000                     _SSPBUF	set	4041
    62  0000                     _SSPCON1	set	4038
    63  0000                     _SSPCON1bits	set	4038
    64  0000                     _SSPSTAT	set	4039
    65  0000                     _SSPSTATbits	set	4039
    66  0000                     _T0CON	set	4053
    67  0000                     _T0CONbits	set	4053
    68  0000                     _TMR0H	set	4055
    69  0000                     _TMR0L	set	4054
    70  0000                     _TRISAbits	set	3986
    71  0000                     _TRISCbits	set	3988
    72  0000                     _TRISDbits	set	3989
    73  0000                     _TXREG	set	4013
    74  0000                     _TXSTA	set	4012
    75  0000                     _TXSTAbits	set	4012
    76                           
    77                           ; #config settings
    78  0000                     
    79                           	psect	cinit
    80  0004FC                     __pcinit:
    81                           	opt stack 0
    82  0004FC                     start_initialization:
    83                           	opt stack 0
    84  0004FC                     __initialization:
    85                           	opt stack 0
    86                           
    87                           ; Clear objects allocated to COMRAM (5 bytes)
    88  0004FC  6A41               	clrf	(__pbssCOMRAM+4)& (0+255),c
    89  0004FE  6A40               	clrf	(__pbssCOMRAM+3)& (0+255),c
    90  000500  6A3F               	clrf	(__pbssCOMRAM+2)& (0+255),c
    91  000502  6A3E               	clrf	(__pbssCOMRAM+1)& (0+255),c
    92  000504  6A3D               	clrf	__pbssCOMRAM& (0+255),c
    93                           
    94                           ; Initialize objects allocated to COMRAM (16 bytes)
    95                           ; load TBLPTR registers with __pidataCOMRAM
    96  000506  0EBC               	movlw	low __pidataCOMRAM
    97  000508  6EF6               	movwf	tblptrl,c
    98  00050A  0E05               	movlw	high __pidataCOMRAM
    99  00050C  6EF7               	movwf	tblptrh,c
   100  00050E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   101  000510  6EF8               	movwf	tblptru,c
   102  000512  EE00  F02D         	lfsr	0,__pdataCOMRAM
   103  000516  EE10 F010          	lfsr	1,16
   104  00051A                     copy_data0:
   105  00051A  0009               	tblrd		*+
   106  00051C  CFF5 FFEE          	movff	tablat,postinc0
   107  000520  50E5               	movf	postdec1,w,c
   108  000522  50E1               	movf	fsr1l,w,c
   109  000524  E1FA               	bnz	copy_data0
   110  000526                     end_of_initialization:
   111                           	opt stack 0
   112  000526                     __end_of__initialization:
   113                           	opt stack 0
   114  000526  0E00               	movlw	low (__Lmediumconst shr (0+16))
   115  000528  6EF8               	movwf	tblptru,c
   116  00052A  0100               	movlb	0
   117  00052C  EF56  F002         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           postinc0	equ	0xFEE
   123                           postdec1	equ	0xFE5
   124                           fsr1l	equ	0xFE1
   125                           
   126                           	psect	bssCOMRAM
   127  00003D                     __pbssCOMRAM:
   128                           	opt stack 0
   129  00003D                     _clock:
   130                           	opt stack 0
   131  00003D                     	ds	4
   132  000041                     _USART_Status:
   133                           	opt stack 0
   134  000041                     	ds	1
   135                           tblptru	equ	0xFF8
   136                           tblptrh	equ	0xFF7
   137                           tblptrl	equ	0xFF6
   138                           tablat	equ	0xFF5
   139                           postinc0	equ	0xFEE
   140                           postdec1	equ	0xFE5
   141                           fsr1l	equ	0xFE1
   142                           
   143                           	psect	dataCOMRAM
   144  00002D                     __pdataCOMRAM:
   145                           	opt stack 0
   146  00002D                     _number:
   147                           	opt stack 0
   148  00002D                     	ds	16
   149                           tblptru	equ	0xFF8
   150                           tblptrh	equ	0xFF7
   151                           tblptrl	equ	0xFF6
   152                           tablat	equ	0xFF5
   153                           postinc0	equ	0xFEE
   154                           postdec1	equ	0xFE5
   155                           fsr1l	equ	0xFE1
   156                           
   157                           	psect	cstackCOMRAM
   158  000001                     __pcstackCOMRAM:
   159                           	opt stack 0
   160  000001                     ??_interruptISR:
   161  000001                     
   162                           ; 1 bytes @ 0x0
   163  000001                     	ds	14
   164  00000F                     ?_getClock:
   165                           	opt stack 0
   166  00000F                     OpenSPI@bus_mode:
   167                           	opt stack 0
   168  00000F                     WriteSPI@TempVar:
   169                           	opt stack 0
   170  00000F                     OpenTimer0@config:
   171                           	opt stack 0
   172  00000F                     startSPI@data:
   173                           	opt stack 0
   174  00000F                     LEDInit@data:
   175                           	opt stack 0
   176  00000F                     OpenUSART@spbrg:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0xE
   180  00000F                     	ds	1
   181  000010                     OpenSPI@smp_phase:
   182                           	opt stack 0
   183  000010                     WriteSPI@data_out:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0xF
   187  000010                     	ds	1
   188  000011                     ??_OpenUSART:
   189  000011                     OpenSPI@sync_mode:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0x10
   193  000011                     	ds	2
   194  000013                     sevenSegmentSM@data:
   195                           	opt stack 0
   196  000013                     LEDFSM@data:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x12
   200  000013                     	ds	1
   201  000014                     OpenUSART@config:
   202                           	opt stack 0
   203                           
   204                           ; 1 bytes @ 0x13
   205  000014                     	ds	1
   206  000015                     ??_LEDFSM:
   207  000015                     ??_sevenSegmentSM:
   208                           
   209                           ; 0 bytes @ 0x14
   210  000015                     	ds	12
   211  000021                     main@ledData:
   212                           	opt stack 0
   213                           
   214                           ; 5 bytes @ 0x20
   215  000021                     	ds	5
   216  000026                     main@spiData:
   217                           	opt stack 0
   218                           
   219                           ; 7 bytes @ 0x25
   220  000026                     	ds	7
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           postinc0	equ	0xFEE
   226                           postdec1	equ	0xFE5
   227                           fsr1l	equ	0xFE1
   228                           
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 27 in file "../src/PIC18/main.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;  spiData         7   37[COMRAM] struct SPIData
   239 ;;  ledData         5   32[COMRAM] struct LEDData
   240 ;; Return value:  Size  Location     Type
   241 ;;		None               void
   242 ;; Registers used:
   243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   244 ;; Tracked objects:
   245 ;;		On entry : 0/0
   246 ;;		On exit  : 0/0
   247 ;;		Unchanged: 0/0
   248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   249 ;;      Params:         0       0       0       0       0       0       0
   250 ;;      Locals:        12       0       0       0       0       0       0
   251 ;;      Temps:          0       0       0       0       0       0       0
   252 ;;      Totals:        12       0       0       0       0       0       0
   253 ;;Total ram usage:       12 bytes
   254 ;; Hardware stack levels required when called:    5
   255 ;; This function calls:
   256 ;;		_LEDFSM
   257 ;;		_LEDInit
   258 ;;		_OpenSPI
   259 ;;		_OpenUSART
   260 ;;		_initClock
   261 ;;		_sevenSegmentSM
   262 ;;		_startSPI
   263 ;; This function is called by:
   264 ;;		Startup code after reset
   265 ;; This function uses a non-reentrant model
   266 ;;
   267                           
   268                           	psect	text0
   269  0004AC                     __ptext0:
   270                           	opt stack 0
   271  0004AC                     _main:
   272                           	opt stack 26
   273                           
   274                           ;main.c: 28: (OSCCONbits.IRCF = 7);
   275                           
   276                           ;incstack = 0
   277  0004AC  88D3               	bsf	4051,4,c	;volatile
   278  0004AE  8AD3               	bsf	4051,5,c	;volatile
   279  0004B0  8CD3               	bsf	4051,6,c	;volatile
   280                           
   281                           ;main.c: 29: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 & 
      +                          0b11111111, 51);;
   282  0004B2  0E00               	movlw	0
   283  0004B4  6E10               	movwf	OpenUSART@spbrg+1,c
   284  0004B6  0E33               	movlw	51
   285  0004B8  6E0F               	movwf	OpenUSART@spbrg,c
   286  0004BA  0E3C               	movlw	60
   287  0004BC  ECF5  F001         	call	_OpenUSART
   288                           
   289                           ;main.c: 30: SPIData spiData;
   290                           ;main.c: 31: LEDData ledData;
   291                           ;main.c: 33: OpenSPI(0b00000000, 0b00000011, 0b10000000);
   292  0004C0  0E03               	movlw	3
   293  0004C2  6E0F               	movwf	OpenSPI@bus_mode,c
   294  0004C4  0E80               	movlw	128
   295  0004C6  6E10               	movwf	OpenSPI@smp_phase,c
   296  0004C8  0E00               	movlw	0
   297  0004CA  EC29  F002         	call	_OpenSPI
   298                           
   299                           ;main.c: 34: startSPI(&spiData);
   300  0004CE  0E00               	movlw	high main@spiData
   301  0004D0  6E10               	movwf	startSPI@data+1,c
   302  0004D2  0E26               	movlw	low main@spiData
   303  0004D4  6E0F               	movwf	startSPI@data,c
   304  0004D6  ECC3  F002         	call	_startSPI	;wreg free
   305                           
   306                           ;main.c: 35: initClock();
   307  0004DA  ECA8  F002         	call	_initClock	;wreg free
   308  0004DE                     l40:
   309  0004DE  D7FF               	goto	l40
   310  0004E0                     l43:
   311                           
   312                           ;main.c: 39: LEDFSM(&ledData);
   313  0004E0  0E00               	movlw	high main@ledData
   314  0004E2  6E14               	movwf	LEDFSM@data+1,c
   315  0004E4  0E21               	movlw	low main@ledData
   316  0004E6  6E13               	movwf	LEDFSM@data,c
   317  0004E8  EC0E  F000         	call	_LEDFSM	;wreg free
   318                           
   319                           ;main.c: 40: sevenSegmentSM(&spiData);
   320  0004EC  0E00               	movlw	high main@spiData
   321  0004EE  6E14               	movwf	sevenSegmentSM@data+1,c
   322  0004F0  0E26               	movlw	low main@spiData
   323  0004F2  6E13               	movwf	sevenSegmentSM@data,c
   324  0004F4  ECEB  F000         	call	_sevenSegmentSM	;wreg free
   325  0004F8  D7F3               	goto	l43
   326  0004FA                     l46:
   327  0004FA  D7FF               	goto	l46
   328  0004FC                     __end_of_main:
   329                           	opt stack 0
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           postdec1	equ	0xFE5
   336                           fsr1l	equ	0xFE1
   337                           
   338 ;; *************** function _startSPI *****************
   339 ;; Defined at:
   340 ;;		line 23 in file "../src/PIC18/sevenSegment.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;  data            2   14[COMRAM] PTR struct SPIData
   343 ;;		 -> main@spiData(7), 
   344 ;; Auto vars:     Size  Location     Type
   345 ;;		None
   346 ;; Return value:  Size  Location     Type
   347 ;;		None               void
   348 ;; Registers used:
   349 ;;		wreg, fsr2l, fsr2h
   350 ;; Tracked objects:
   351 ;;		On entry : 0/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   355 ;;      Params:         2       0       0       0       0       0       0
   356 ;;      Locals:         0       0       0       0       0       0       0
   357 ;;      Temps:          0       0       0       0       0       0       0
   358 ;;      Totals:         2       0       0       0       0       0       0
   359 ;;Total ram usage:        2 bytes
   360 ;; Hardware stack levels used:    1
   361 ;; Hardware stack levels required when called:    3
   362 ;; This function calls:
   363 ;;		Nothing
   364 ;; This function is called by:
   365 ;;		_main
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           	psect	text1
   370  000586                     __ptext1:
   371                           	opt stack 0
   372  000586                     _startSPI:
   373                           	opt stack 27
   374                           
   375                           ;sevenSegment.c: 24: TRISCbits.TRISC2 = 0;
   376                           
   377                           ;incstack = 0
   378  000586  9494               	bcf	3988,2,c	;volatile
   379                           
   380                           ;sevenSegment.c: 25: PORTCbits.RC2 = 1;
   381  000588  8482               	bsf	3970,2,c	;volatile
   382                           
   383                           ;sevenSegment.c: 26: data->state = SPI_START;
   384  00058A  C00F  FFD9         	movff	startSPI@data,fsr2l
   385  00058E  C010  FFDA         	movff	startSPI@data+1,fsr2h
   386  000592  0E00               	movlw	0
   387  000594  6EDF               	movwf	indf2,c
   388  000596  0012               	return	
   389  000598                     __end_of_startSPI:
   390                           	opt stack 0
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           postdec1	equ	0xFE5
   397                           fsr1l	equ	0xFE1
   398                           indf2	equ	0xFDF
   399                           fsr2h	equ	0xFDA
   400                           fsr2l	equ	0xFD9
   401                           
   402 ;; *************** function _sevenSegmentSM *****************
   403 ;; Defined at:
   404 ;;		line 33 in file "../src/PIC18/sevenSegment.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;  data            2   18[COMRAM] PTR struct SPIData
   407 ;;		 -> main@spiData(7), 
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;		None               void
   412 ;; Registers used:
   413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   419 ;;      Params:         2       0       0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0       0       0
   421 ;;      Temps:         12       0       0       0       0       0       0
   422 ;;      Totals:        14       0       0       0       0       0       0
   423 ;;Total ram usage:       14 bytes
   424 ;; Hardware stack levels used:    1
   425 ;; Hardware stack levels required when called:    4
   426 ;; This function calls:
   427 ;;		_WriteSPI
   428 ;;		_getClock
   429 ;; This function is called by:
   430 ;;		_main
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           	psect	text2
   435  0001D6                     __ptext2:
   436                           	opt stack 0
   437  0001D6                     _sevenSegmentSM:
   438                           	opt stack 26
   439                           
   440                           ;sevenSegment.c: 34: switch(data->state){
   441                           
   442                           ;incstack = 0
   443  0001D6  D0C7               	goto	l1012
   444  0001D8                     l990:
   445                           
   446                           ;sevenSegment.c: 36: data->currentClock = getClock();
   447  0001D8  ECCC  F002         	call	_getClock	;wreg free
   448  0001DC  C00F  F015         	movff	?_getClock,??_sevenSegmentSM
   449  0001E0  C010  F016         	movff	?_getClock+1,??_sevenSegmentSM+1
   450  0001E4  C011  F017         	movff	?_getClock+2,??_sevenSegmentSM+2
   451  0001E8  C012  F018         	movff	?_getClock+3,??_sevenSegmentSM+3
   452  0001EC  EE20 F003          	lfsr	2,3
   453  0001F0  5013               	movf	sevenSegmentSM@data,w,c
   454  0001F2  26D9               	addwf	fsr2l,f,c
   455  0001F4  5014               	movf	sevenSegmentSM@data+1,w,c
   456  0001F6  22DA               	addwfc	fsr2h,f,c
   457  0001F8  C015  FFDE         	movff	??_sevenSegmentSM,postinc2
   458  0001FC  C016  FFDE         	movff	??_sevenSegmentSM+1,postinc2
   459  000200  C017  FFDE         	movff	??_sevenSegmentSM+2,postinc2
   460  000204  C018  FFDD         	movff	??_sevenSegmentSM+3,postdec2
   461  000208  06D9               	decf	fsr2l,f,c
   462  00020A  06D9               	decf	fsr2l,f,c
   463                           
   464                           ;sevenSegment.c: 37: data->sevenData = 0;
   465  00020C  EE20 F001          	lfsr	2,1
   466  000210  5013               	movf	sevenSegmentSM@data,w,c
   467  000212  26D9               	addwf	fsr2l,f,c
   468  000214  5014               	movf	sevenSegmentSM@data+1,w,c
   469  000216  22DA               	addwfc	fsr2h,f,c
   470  000218  0E00               	movlw	0
   471  00021A  6EDE               	movwf	postinc2,c
   472  00021C  0E00               	movlw	0
   473  00021E  6EDD               	movwf	postdec2,c
   474                           
   475                           ;sevenSegment.c: 38: data->state = WAIT;
   476  000220  C013  FFD9         	movff	sevenSegmentSM@data,fsr2l
   477  000224  C014  FFDA         	movff	sevenSegmentSM@data+1,fsr2h
   478  000228  0E01               	movlw	1
   479  00022A  6EDF               	movwf	indf2,c
   480                           
   481                           ;sevenSegment.c: 39: WriteSPI(number[data->sevenData]);
   482  00022C  EE20 F001          	lfsr	2,1
   483  000230  5013               	movf	sevenSegmentSM@data,w,c
   484  000232  26D9               	addwf	fsr2l,f,c
   485  000234  5014               	movf	sevenSegmentSM@data+1,w,c
   486  000236  22DA               	addwfc	fsr2h,f,c
   487  000238  CFDE F015          	movff	postinc2,??_sevenSegmentSM
   488  00023C  CFDD F016          	movff	postdec2,??_sevenSegmentSM+1
   489  000240  0E2D               	movlw	low _number
   490  000242  2415               	addwf	??_sevenSegmentSM,w,c
   491  000244  6ED9               	movwf	fsr2l,c
   492  000246  0E00               	movlw	high _number
   493  000248  2016               	addwfc	??_sevenSegmentSM+1,w,c
   494  00024A  6EDA               	movwf	fsr2h,c
   495  00024C  50DF               	movf	indf2,w,c
   496  00024E  ECB7  F002         	call	_WriteSPI
   497                           
   498                           ;sevenSegment.c: 40: break;
   499  000252  D094               	goto	l95
   500  000254                     l998:
   501                           
   502                           ;sevenSegment.c: 43: if(getClock() - data->currentClock >= 488){
   503  000254  EE20 F003          	lfsr	2,3
   504  000258  5013               	movf	sevenSegmentSM@data,w,c
   505  00025A  26D9               	addwf	fsr2l,f,c
   506  00025C  5014               	movf	sevenSegmentSM@data+1,w,c
   507  00025E  22DA               	addwfc	fsr2h,f,c
   508  000260  CFDE F015          	movff	postinc2,??_sevenSegmentSM
   509  000264  CFDE F016          	movff	postinc2,??_sevenSegmentSM+1
   510  000268  CFDE F017          	movff	postinc2,??_sevenSegmentSM+2
   511  00026C  CFDE F018          	movff	postinc2,??_sevenSegmentSM+3
   512  000270  1E15               	comf	??_sevenSegmentSM,f,c
   513  000272  1E16               	comf	??_sevenSegmentSM+1,f,c
   514  000274  1E17               	comf	??_sevenSegmentSM+2,f,c
   515  000276  1E18               	comf	??_sevenSegmentSM+3,f,c
   516  000278  2A15               	incf	??_sevenSegmentSM,f,c
   517  00027A  0E00               	movlw	0
   518  00027C  2216               	addwfc	??_sevenSegmentSM+1,f,c
   519  00027E  2217               	addwfc	??_sevenSegmentSM+2,f,c
   520  000280  2218               	addwfc	??_sevenSegmentSM+3,f,c
   521  000282  ECCC  F002         	call	_getClock	;wreg free
   522  000286  C00F  F019         	movff	?_getClock,??_sevenSegmentSM+4
   523  00028A  C010  F01A         	movff	?_getClock+1,??_sevenSegmentSM+5
   524  00028E  C011  F01B         	movff	?_getClock+2,??_sevenSegmentSM+6
   525  000292  C012  F01C         	movff	?_getClock+3,??_sevenSegmentSM+7
   526  000296  5015               	movf	??_sevenSegmentSM,w,c
   527  000298  2419               	addwf	??_sevenSegmentSM+4,w,c
   528  00029A  6E1D               	movwf	(??_sevenSegmentSM+8)& (0+255),c
   529  00029C  5016               	movf	??_sevenSegmentSM+1,w,c
   530  00029E  201A               	addwfc	??_sevenSegmentSM+5,w,c
   531  0002A0  6E1E               	movwf	(??_sevenSegmentSM+9)& (0+255),c
   532  0002A2  5017               	movf	??_sevenSegmentSM+2,w,c
   533  0002A4  201B               	addwfc	??_sevenSegmentSM+6,w,c
   534  0002A6  6E1F               	movwf	(??_sevenSegmentSM+10)& (0+255),c
   535  0002A8  5018               	movf	??_sevenSegmentSM+3,w,c
   536  0002AA  201C               	addwfc	??_sevenSegmentSM+7,w,c
   537  0002AC  6E20               	movwf	(??_sevenSegmentSM+11)& (0+255),c
   538  0002AE  0EE8               	movlw	232
   539  0002B0  5C1D               	subwf	??_sevenSegmentSM+8,w,c
   540  0002B2  0E01               	movlw	1
   541  0002B4  581E               	subwfb	??_sevenSegmentSM+9,w,c
   542  0002B6  0E00               	movlw	0
   543  0002B8  581F               	subwfb	??_sevenSegmentSM+10,w,c
   544  0002BA  0E00               	movlw	0
   545  0002BC  5820               	subwfb	??_sevenSegmentSM+11,w,c
   546  0002BE  A0D8               	btfss	status,0,c
   547  0002C0  D04B               	goto	l1008
   548                           
   549                           ;sevenSegment.c: 44: data->currentClock = getClock();
   550  0002C2  ECCC  F002         	call	_getClock	;wreg free
   551  0002C6  C00F  F015         	movff	?_getClock,??_sevenSegmentSM
   552  0002CA  C010  F016         	movff	?_getClock+1,??_sevenSegmentSM+1
   553  0002CE  C011  F017         	movff	?_getClock+2,??_sevenSegmentSM+2
   554  0002D2  C012  F018         	movff	?_getClock+3,??_sevenSegmentSM+3
   555  0002D6  EE20 F003          	lfsr	2,3
   556  0002DA  5013               	movf	sevenSegmentSM@data,w,c
   557  0002DC  26D9               	addwf	fsr2l,f,c
   558  0002DE  5014               	movf	sevenSegmentSM@data+1,w,c
   559  0002E0  22DA               	addwfc	fsr2h,f,c
   560  0002E2  C015  FFDE         	movff	??_sevenSegmentSM,postinc2
   561  0002E6  C016  FFDE         	movff	??_sevenSegmentSM+1,postinc2
   562  0002EA  C017  FFDE         	movff	??_sevenSegmentSM+2,postinc2
   563  0002EE  C018  FFDD         	movff	??_sevenSegmentSM+3,postdec2
   564  0002F2  06D9               	decf	fsr2l,f,c
   565  0002F4  06D9               	decf	fsr2l,f,c
   566                           
   567                           ;sevenSegment.c: 45: WriteSPI(number[data->sevenData]);
   568  0002F6  EE20 F001          	lfsr	2,1
   569  0002FA  5013               	movf	sevenSegmentSM@data,w,c
   570  0002FC  26D9               	addwf	fsr2l,f,c
   571  0002FE  5014               	movf	sevenSegmentSM@data+1,w,c
   572  000300  22DA               	addwfc	fsr2h,f,c
   573  000302  CFDE F015          	movff	postinc2,??_sevenSegmentSM
   574  000306  CFDD F016          	movff	postdec2,??_sevenSegmentSM+1
   575  00030A  0E2D               	movlw	low _number
   576  00030C  2415               	addwf	??_sevenSegmentSM,w,c
   577  00030E  6ED9               	movwf	fsr2l,c
   578  000310  0E00               	movlw	high _number
   579  000312  2016               	addwfc	??_sevenSegmentSM+1,w,c
   580  000314  6EDA               	movwf	fsr2h,c
   581  000316  50DF               	movf	indf2,w,c
   582  000318  ECB7  F002         	call	_WriteSPI
   583                           
   584                           ;sevenSegment.c: 46: data->sevenData++;
   585  00031C  EE20 F001          	lfsr	2,1
   586  000320  5013               	movf	sevenSegmentSM@data,w,c
   587  000322  26D9               	addwf	fsr2l,f,c
   588  000324  5014               	movf	sevenSegmentSM@data+1,w,c
   589  000326  22DA               	addwfc	fsr2h,f,c
   590  000328  2ADE               	incf	postinc2,f,c
   591  00032A  0E00               	movlw	0
   592  00032C  22DD               	addwfc	postdec2,f,c
   593                           
   594                           ;sevenSegment.c: 47: if(data->sevenData == 16){
   595  00032E  EE20 F001          	lfsr	2,1
   596  000332  5013               	movf	sevenSegmentSM@data,w,c
   597  000334  26D9               	addwf	fsr2l,f,c
   598  000336  5014               	movf	sevenSegmentSM@data+1,w,c
   599  000338  22DA               	addwfc	fsr2h,f,c
   600  00033A  50DE               	movf	postinc2,w,c
   601  00033C  0A10               	xorlw	16
   602  00033E  10DD               	iorwf	postdec2,w,c
   603  000340  A4D8               	btfss	status,2,c
   604  000342  D00A               	goto	l1008
   605                           
   606                           ;sevenSegment.c: 48: data->sevenData = 0;
   607  000344  EE20 F001          	lfsr	2,1
   608  000348  5013               	movf	sevenSegmentSM@data,w,c
   609  00034A  26D9               	addwf	fsr2l,f,c
   610  00034C  5014               	movf	sevenSegmentSM@data+1,w,c
   611  00034E  22DA               	addwfc	fsr2h,f,c
   612  000350  0E00               	movlw	0
   613  000352  6EDE               	movwf	postinc2,c
   614  000354  0E00               	movlw	0
   615  000356  6EDD               	movwf	postdec2,c
   616  000358                     l1008:
   617                           
   618                           ;sevenSegment.c: 49: }
   619                           ;sevenSegment.c: 50: }
   620                           ;sevenSegment.c: 52: data->state = WAIT;
   621  000358  C013  FFD9         	movff	sevenSegmentSM@data,fsr2l
   622  00035C  C014  FFDA         	movff	sevenSegmentSM@data+1,fsr2h
   623  000360  0E01               	movlw	1
   624  000362  6EDF               	movwf	indf2,c
   625                           
   626                           ;sevenSegment.c: 53: break;
   627  000364  D00B               	goto	l95
   628  000366                     l1012:
   629  000366  C013  FFD9         	movff	sevenSegmentSM@data,fsr2l
   630  00036A  C014  FFDA         	movff	sevenSegmentSM@data+1,fsr2h
   631  00036E  50DF               	movf	indf2,w,c
   632                           
   633                           ; Switch size 1, requested type "space"
   634                           ; Number of cases is 2, Range of values is 0 to 1
   635                           ; switch strategies available:
   636                           ; Name         Instructions Cycles
   637                           ; simple_byte            7     4 (average)
   638                           ;	Chosen strategy is simple_byte
   639  000370  0A00               	xorlw	0	; case 0
   640  000372  B4D8               	btfsc	status,2,c
   641  000374  D731               	goto	l990
   642  000376  0A01               	xorlw	1	; case 1
   643  000378  B4D8               	btfsc	status,2,c
   644  00037A  D76C               	goto	l998
   645  00037C                     l95:
   646  00037C  0012               	return	
   647  00037E                     __end_of_sevenSegmentSM:
   648                           	opt stack 0
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           postinc0	equ	0xFEE
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           indf2	equ	0xFDF
   657                           postinc2	equ	0xFDE
   658                           postdec2	equ	0xFDD
   659                           fsr2h	equ	0xFDA
   660                           fsr2l	equ	0xFD9
   661                           status	equ	0xFD8
   662                           
   663 ;; *************** function _WriteSPI *****************
   664 ;; Defined at:
   665 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_writ.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;  data_out        1    wreg     unsigned char 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  data_out        1   15[COMRAM] unsigned char 
   670 ;;  TempVar         1   14[COMRAM] unsigned char 
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      char 
   673 ;; Registers used:
   674 ;;		wreg
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   680 ;;      Params:         0       0       0       0       0       0       0
   681 ;;      Locals:         2       0       0       0       0       0       0
   682 ;;      Temps:          0       0       0       0       0       0       0
   683 ;;      Totals:         2       0       0       0       0       0       0
   684 ;;Total ram usage:        2 bytes
   685 ;; Hardware stack levels used:    1
   686 ;; Hardware stack levels required when called:    3
   687 ;; This function calls:
   688 ;;		Nothing
   689 ;; This function is called by:
   690 ;;		_sevenSegmentSM
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	text3
   695  00056E                     __ptext3:
   696                           	opt stack 0
   697  00056E                     _WriteSPI:
   698                           	opt stack 26
   699                           
   700                           ;incstack = 0
   701                           ;WriteSPI@data_out stored from wreg
   702  00056E  6E10               	movwf	WriteSPI@data_out,c
   703  000570  CFC9 F00F          	movff	4041,WriteSPI@TempVar	;volatile
   704  000574  969E               	bcf	3998,3,c	;volatile
   705  000576  9EC6               	bcf	4038,7,c	;volatile
   706  000578  C010  FFC9         	movff	WriteSPI@data_out,4041	;volatile
   707  00057C  BEC6               	btfsc	4038,7,c	;volatile
   708  00057E  D002               	goto	l188
   709  000580                     l190:
   710  000580  A69E               	btfss	3998,3,c	;volatile
   711  000582  D7FE               	goto	l190
   712  000584                     l188:
   713  000584  0012               	return	
   714  000586                     __end_of_WriteSPI:
   715                           	opt stack 0
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           postinc0	equ	0xFEE
   721                           postdec1	equ	0xFE5
   722                           fsr1l	equ	0xFE1
   723                           indf2	equ	0xFDF
   724                           postinc2	equ	0xFDE
   725                           postdec2	equ	0xFDD
   726                           fsr2h	equ	0xFDA
   727                           fsr2l	equ	0xFD9
   728                           status	equ	0xFD8
   729                           
   730 ;; *************** function _initClock *****************
   731 ;; Defined at:
   732 ;;		line 9 in file "../src/PIC18/clock.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;		None               void
   739 ;; Registers used:
   740 ;;		wreg, status,2, status,0, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   746 ;;      Params:         0       0       0       0       0       0       0
   747 ;;      Locals:         0       0       0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0
   749 ;;      Totals:         0       0       0       0       0       0       0
   750 ;;Total ram usage:        0 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    4
   753 ;; This function calls:
   754 ;;		_OpenTimer0
   755 ;;		_enableInterrupt
   756 ;; This function is called by:
   757 ;;		_main
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           	psect	text4
   762  000550                     __ptext4:
   763                           	opt stack 0
   764  000550                     _initClock:
   765                           	opt stack 26
   766                           
   767                           ;clock.c: 10: clock = 0;
   768                           
   769                           ;incstack = 0
   770  000550  0E00               	movlw	0
   771  000552  6E3D               	movwf	_clock,c
   772  000554  0E00               	movlw	0
   773  000556  6E3E               	movwf	_clock+1,c
   774  000558  0E00               	movlw	0
   775  00055A  6E3F               	movwf	_clock+2,c
   776  00055C  0E00               	movlw	0
   777  00055E  6E40               	movwf	_clock+3,c
   778                           
   779                           ;clock.c: 11: OpenTimer0(0b11111111 & 0b11111111 & 0b11011111 & 0b11110010 );
   780  000560  0ED2               	movlw	210
   781  000562  EC98  F002         	call	_OpenTimer0
   782                           
   783                           ;clock.c: 12: enableInterrupt();
   784  000566  ECEE  F002         	call	_enableInterrupt	;wreg free
   785                           
   786                           ;clock.c: 13: INTCONbits.TMR0IF = 0;
   787  00056A  94F2               	bcf	intcon,2,c	;volatile
   788  00056C  0012               	return	
   789  00056E                     __end_of_initClock:
   790                           	opt stack 0
   791                           tblptru	equ	0xFF8
   792                           tblptrh	equ	0xFF7
   793                           tblptrl	equ	0xFF6
   794                           tablat	equ	0xFF5
   795                           intcon	equ	0xFF2
   796                           postinc0	equ	0xFEE
   797                           postdec1	equ	0xFE5
   798                           fsr1l	equ	0xFE1
   799                           indf2	equ	0xFDF
   800                           postinc2	equ	0xFDE
   801                           postdec2	equ	0xFDD
   802                           fsr2h	equ	0xFDA
   803                           fsr2l	equ	0xFD9
   804                           status	equ	0xFD8
   805                           
   806 ;; *************** function _enableInterrupt *****************
   807 ;; Defined at:
   808 ;;		line 6 in file "../src/PIC18/clock.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;		None               void
   815 ;; Registers used:
   816 ;;		None
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   822 ;;      Params:         0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0       0       0
   825 ;;      Totals:         0       0       0       0       0       0       0
   826 ;;Total ram usage:        0 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; Hardware stack levels required when called:    3
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		_initClock
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text5
   837  0005DC                     __ptext5:
   838                           	opt stack 0
   839  0005DC                     _enableInterrupt:
   840                           	opt stack 26
   841                           
   842                           ;clock.c: 7: INTCONbits.GIE = 1;
   843                           
   844                           ;incstack = 0
   845  0005DC  8EF2               	bsf	intcon,7,c	;volatile
   846  0005DE  0012               	return	
   847  0005E0                     __end_of_enableInterrupt:
   848                           	opt stack 0
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           intcon	equ	0xFF2
   854                           postinc0	equ	0xFEE
   855                           postdec1	equ	0xFE5
   856                           fsr1l	equ	0xFE1
   857                           indf2	equ	0xFDF
   858                           postinc2	equ	0xFDE
   859                           postdec2	equ	0xFDD
   860                           fsr2h	equ	0xFDA
   861                           fsr2l	equ	0xFD9
   862                           status	equ	0xFD8
   863                           
   864 ;; *************** function _OpenTimer0 *****************
   865 ;; Defined at:
   866 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\Timers\t0open.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  config          1    wreg     unsigned char 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  config          1   14[COMRAM] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;		None               void
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   880 ;;      Params:         0       0       0       0       0       0       0
   881 ;;      Locals:         1       0       0       0       0       0       0
   882 ;;      Temps:          0       0       0       0       0       0       0
   883 ;;      Totals:         1       0       0       0       0       0       0
   884 ;;Total ram usage:        1 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    3
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_initClock
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text6
   895  000530                     __ptext6:
   896                           	opt stack 0
   897  000530                     _OpenTimer0:
   898                           	opt stack 26
   899                           
   900                           ;incstack = 0
   901                           ;OpenTimer0@config stored from wreg
   902  000530  6E0F               	movwf	OpenTimer0@config,c
   903  000532  500F               	movf	OpenTimer0@config,w,c
   904  000534  0B7F               	andlw	127
   905  000536  6ED5               	movwf	4053,c	;volatile
   906  000538  0E00               	movlw	0
   907  00053A  6ED7               	movwf	4055,c	;volatile
   908  00053C  0E00               	movlw	0
   909  00053E  6ED6               	movwf	4054,c	;volatile
   910  000540  94F2               	bcf	intcon,2,c	;volatile
   911  000542  AE0F               	btfss	OpenTimer0@config,7,c
   912  000544  D002               	goto	l205
   913  000546  8AF2               	bsf	intcon,5,c	;volatile
   914  000548  D001               	goto	l206
   915  00054A                     l205:
   916  00054A  9AF2               	bcf	intcon,5,c	;volatile
   917  00054C                     l206:
   918  00054C  8ED5               	bsf	4053,7,c	;volatile
   919  00054E  0012               	return	
   920  000550                     __end_of_OpenTimer0:
   921                           	opt stack 0
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           intcon	equ	0xFF2
   927                           postinc0	equ	0xFEE
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           indf2	equ	0xFDF
   931                           postinc2	equ	0xFDE
   932                           postdec2	equ	0xFDD
   933                           fsr2h	equ	0xFDA
   934                           fsr2l	equ	0xFD9
   935                           status	equ	0xFD8
   936                           
   937 ;; *************** function _OpenUSART *****************
   938 ;; Defined at:
   939 ;;		line 73 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\USART\uopen.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  config          1    wreg     unsigned char 
   942 ;;  spbrg           2   14[COMRAM] unsigned int 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  config          1   19[COMRAM] unsigned char 
   945 ;; Return value:  Size  Location     Type
   946 ;;		None               void
   947 ;; Registers used:
   948 ;;		wreg, status,2
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   954 ;;      Params:         2       0       0       0       0       0       0
   955 ;;      Locals:         1       0       0       0       0       0       0
   956 ;;      Temps:          3       0       0       0       0       0       0
   957 ;;      Totals:         6       0       0       0       0       0       0
   958 ;;Total ram usage:        6 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; Hardware stack levels required when called:    3
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_main
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text7
   969  0003EA                     __ptext7:
   970                           	opt stack 0
   971  0003EA                     _OpenUSART:
   972                           	opt stack 27
   973                           
   974                           ;incstack = 0
   975                           ;OpenUSART@config stored from wreg
   976  0003EA  6E14               	movwf	OpenUSART@config,c
   977  0003EC  0E00               	movlw	0
   978  0003EE  6EAC               	movwf	4012,c	;volatile
   979  0003F0  0E00               	movlw	0
   980  0003F2  6EAB               	movwf	4011,c	;volatile
   981  0003F4  B014               	btfsc	OpenUSART@config,0,c
   982  0003F6  88AC               	bsf	4012,4,c	;volatile
   983  0003F8  A214               	btfss	OpenUSART@config,1,c
   984  0003FA  D002               	goto	l888
   985  0003FC  8CAC               	bsf	4012,6,c	;volatile
   986  0003FE  8CAB               	bsf	4011,6,c	;volatile
   987  000400                     l888:
   988  000400  B414               	btfsc	OpenUSART@config,2,c
   989  000402  8EAC               	bsf	4012,7,c	;volatile
   990  000404  A614               	btfss	OpenUSART@config,3,c
   991  000406  D002               	goto	l231
   992  000408  88AB               	bsf	4011,4,c	;volatile
   993  00040A  D001               	goto	l896
   994  00040C                     l231:
   995  00040C  8AAB               	bsf	4011,5,c	;volatile
   996  00040E                     l896:
   997  00040E  B814               	btfsc	OpenUSART@config,4,c
   998  000410  84AC               	bsf	4012,2,c	;volatile
   999  000412  989E               	bcf	3998,4,c	;volatile
  1000  000414  BA14               	btfsc	OpenUSART@config,5,c
  1001  000416  86AB               	bsf	4011,3,c	;volatile
  1002  000418  AC14               	btfss	OpenUSART@config,6,c
  1003  00041A  D002               	goto	l235
  1004  00041C  8A9D               	bsf	3997,5,c	;volatile
  1005  00041E  D001               	goto	l236
  1006  000420                     l235:
  1007  000420  9A9D               	bcf	3997,5,c	;volatile
  1008  000422                     l236:
  1009  000422  9A9E               	bcf	3998,5,c	;volatile
  1010  000424  AE14               	btfss	OpenUSART@config,7,c
  1011  000426  D002               	goto	l237
  1012  000428  889D               	bsf	3997,4,c	;volatile
  1013  00042A  D001               	goto	l238
  1014  00042C                     l237:
  1015  00042C  989D               	bcf	3997,4,c	;volatile
  1016  00042E                     l238:
  1017  00042E  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1018  000432  C010  F011         	movff	OpenUSART@spbrg+1,??_OpenUSART
  1019  000436  C011  F012         	movff	??_OpenUSART,??_OpenUSART+1
  1020  00043A  6A13               	clrf	(??_OpenUSART+2)& (0+255),c
  1021  00043C  5012               	movf	??_OpenUSART+1,w,c
  1022  00043E  6EB0               	movwf	4016,c	;volatile
  1023  000440  8AAC               	bsf	4012,5,c	;volatile
  1024  000442  8EAB               	bsf	4011,7,c	;volatile
  1025  000444  9C94               	bcf	3988,6,c	;volatile
  1026  000446  8E94               	bsf	3988,7,c	;volatile
  1027  000448  B8AC               	btfsc	4012,4,c	;volatile
  1028  00044A  BEAC               	btfsc	4012,7,c	;volatile
  1029  00044C  D001               	goto	l240
  1030  00044E  8C94               	bsf	3988,6,c	;volatile
  1031  000450                     l240:
  1032  000450  0012               	return	
  1033  000452                     __end_of_OpenUSART:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           intcon	equ	0xFF2
  1040                           postinc0	equ	0xFEE
  1041                           postdec1	equ	0xFE5
  1042                           fsr1l	equ	0xFE1
  1043                           indf2	equ	0xFDF
  1044                           postinc2	equ	0xFDE
  1045                           postdec2	equ	0xFDD
  1046                           fsr2h	equ	0xFDA
  1047                           fsr2l	equ	0xFD9
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _OpenSPI *****************
  1051 ;; Defined at:
  1052 ;;		line 14 in file "C:\Program Files\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_open.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  sync_mode       1    wreg     unsigned char 
  1055 ;;  bus_mode        1   14[COMRAM] unsigned char 
  1056 ;;  smp_phase       1   15[COMRAM] unsigned char 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  sync_mode       1   16[COMRAM] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;		None               void
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1068 ;;      Params:         2       0       0       0       0       0       0
  1069 ;;      Locals:         1       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0
  1071 ;;      Totals:         3       0       0       0       0       0       0
  1072 ;;Total ram usage:        3 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    3
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text8
  1083  000452                     __ptext8:
  1084                           	opt stack 0
  1085  000452                     _OpenSPI:
  1086                           	opt stack 27
  1087                           
  1088                           ;incstack = 0
  1089                           ;OpenSPI@sync_mode stored from wreg
  1090  000452  6E11               	movwf	OpenSPI@sync_mode,c
  1091  000454  0E3F               	movlw	63
  1092  000456  16C7               	andwf	4039,f,c	;volatile
  1093  000458  0E00               	movlw	0
  1094  00045A  6EC6               	movwf	4038,c	;volatile
  1095  00045C  5011               	movf	OpenSPI@sync_mode,w,c
  1096  00045E  12C6               	iorwf	4038,f,c	;volatile
  1097  000460  5010               	movf	OpenSPI@smp_phase,w,c
  1098  000462  12C7               	iorwf	4039,f,c	;volatile
  1099  000464  D005               	goto	l938
  1100  000466                     l166:
  1101  000466  8CC7               	bsf	4039,6,c	;volatile
  1102  000468  D015               	goto	l942
  1103  00046A                     l168:
  1104  00046A  8CC7               	bsf	4039,6,c	;volatile
  1105  00046C                     l169:
  1106  00046C  88C6               	bsf	4038,4,c	;volatile
  1107  00046E  D012               	goto	l942
  1108  000470                     l938:
  1109  000470  500F               	movf	OpenSPI@bus_mode,w,c
  1110                           
  1111                           ; Switch size 1, requested type "space"
  1112                           ; Number of cases is 3, Range of values is 0 to 3
  1113                           ; switch strategies available:
  1114                           ; Name         Instructions Cycles
  1115                           ; simple_byte           10     6 (average)
  1116                           ;	Chosen strategy is simple_byte
  1117  000472  0A00               	xorlw	0	; case 0
  1118  000474  B4D8               	btfsc	status,2,c
  1119  000476  D7F7               	goto	l166
  1120  000478  0A02               	xorlw	2	; case 2
  1121  00047A  B4D8               	btfsc	status,2,c
  1122  00047C  D7F6               	goto	l168
  1123  00047E  0A01               	xorlw	1	; case 3
  1124  000480  B4D8               	btfsc	status,2,c
  1125  000482  D7F4               	goto	l169
  1126  000484  D007               	goto	l942
  1127  000486                     l172:
  1128  000486  8694               	bsf	3988,3,c	;volatile
  1129  000488  8A92               	bsf	3986,5,c	;volatile
  1130  00048A  D00C               	goto	l173
  1131  00048C                     l174:
  1132  00048C  8694               	bsf	3988,3,c	;volatile
  1133  00048E  D00A               	goto	l173
  1134  000490                     l175:
  1135  000490  9694               	bcf	3988,3,c	;volatile
  1136  000492  D008               	goto	l173
  1137  000494                     l942:
  1138  000494  5011               	movf	OpenSPI@sync_mode,w,c
  1139                           
  1140                           ; Switch size 1, requested type "space"
  1141                           ; Number of cases is 2, Range of values is 4 to 5
  1142                           ; switch strategies available:
  1143                           ; Name         Instructions Cycles
  1144                           ; simple_byte            7     4 (average)
  1145                           ;	Chosen strategy is simple_byte
  1146  000496  0A04               	xorlw	4	; case 4
  1147  000498  B4D8               	btfsc	status,2,c
  1148  00049A  D7F5               	goto	l172
  1149  00049C  0A01               	xorlw	1	; case 5
  1150  00049E  B4D8               	btfsc	status,2,c
  1151  0004A0  D7F5               	goto	l174
  1152  0004A2  D7F6               	goto	l175
  1153  0004A4                     l173:
  1154  0004A4  8894               	bsf	3988,4,c	;volatile
  1155  0004A6  9A94               	bcf	3988,5,c	;volatile
  1156  0004A8  8AC6               	bsf	4038,5,c	;volatile
  1157  0004AA  0012               	return	
  1158  0004AC                     __end_of_OpenSPI:
  1159                           	opt stack 0
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           intcon	equ	0xFF2
  1165                           postinc0	equ	0xFEE
  1166                           postdec1	equ	0xFE5
  1167                           fsr1l	equ	0xFE1
  1168                           indf2	equ	0xFDF
  1169                           postinc2	equ	0xFDE
  1170                           postdec2	equ	0xFDD
  1171                           fsr2h	equ	0xFDA
  1172                           fsr2l	equ	0xFD9
  1173                           status	equ	0xFD8
  1174                           
  1175 ;; *************** function _LEDInit *****************
  1176 ;; Defined at:
  1177 ;;		line 5 in file "../src/PIC18/LEDFSM.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  data            2   14[COMRAM] PTR struct LEDData
  1180 ;;		 -> main@ledData(5), 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;		None               void
  1185 ;; Registers used:
  1186 ;;		wreg, fsr2l, fsr2h
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1192 ;;      Params:         2       0       0       0       0       0       0
  1193 ;;      Locals:         0       0       0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0
  1195 ;;      Totals:         2       0       0       0       0       0       0
  1196 ;;Total ram usage:        2 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    3
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_main
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text9
  1207  0005CC                     __ptext9:
  1208                           	opt stack 0
  1209  0005CC                     _LEDInit:
  1210                           	opt stack 27
  1211                           
  1212                           ;LEDFSM.c: 6: TRISDbits.RD7 = 0;
  1213                           
  1214                           ;incstack = 0
  1215  0005CC  9E95               	bcf	3989,7,c	;volatile
  1216                           
  1217                           ;LEDFSM.c: 7: data->state = LED_START;
  1218  0005CE  C00F  FFD9         	movff	LEDInit@data,fsr2l
  1219  0005D2  C010  FFDA         	movff	LEDInit@data+1,fsr2h
  1220  0005D6  0E00               	movlw	0
  1221  0005D8  6EDF               	movwf	indf2,c
  1222  0005DA  0012               	return	
  1223  0005DC                     __end_of_LEDInit:
  1224                           	opt stack 0
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           intcon	equ	0xFF2
  1230                           postinc0	equ	0xFEE
  1231                           postdec1	equ	0xFE5
  1232                           fsr1l	equ	0xFE1
  1233                           indf2	equ	0xFDF
  1234                           postinc2	equ	0xFDE
  1235                           postdec2	equ	0xFDD
  1236                           fsr2h	equ	0xFDA
  1237                           fsr2l	equ	0xFD9
  1238                           status	equ	0xFD8
  1239                           
  1240 ;; *************** function _LEDFSM *****************
  1241 ;; Defined at:
  1242 ;;		line 10 in file "../src/PIC18/LEDFSM.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  data            2   18[COMRAM] PTR struct LEDData
  1245 ;;		 -> main@ledData(5), 
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;		None
  1248 ;; Return value:  Size  Location     Type
  1249 ;;		None               void
  1250 ;; Registers used:
  1251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1257 ;;      Params:         2       0       0       0       0       0       0
  1258 ;;      Locals:         0       0       0       0       0       0       0
  1259 ;;      Temps:         12       0       0       0       0       0       0
  1260 ;;      Totals:        14       0       0       0       0       0       0
  1261 ;;Total ram usage:       14 bytes
  1262 ;; Hardware stack levels used:    1
  1263 ;; Hardware stack levels required when called:    4
  1264 ;; This function calls:
  1265 ;;		_getClock
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text10
  1272  00001C                     __ptext10:
  1273                           	opt stack 0
  1274  00001C                     _LEDFSM:
  1275                           	opt stack 26
  1276                           
  1277                           ;LEDFSM.c: 11: switch(data->state){
  1278                           
  1279                           ;incstack = 0
  1280  00001C  D0CD               	goto	l986
  1281  00001E                     l136:
  1282                           
  1283                           ;LEDFSM.c: 13: PORTDbits.RD7 = 1;
  1284  00001E  8E83               	bsf	3971,7,c	;volatile
  1285                           
  1286                           ;LEDFSM.c: 14: data->currentClock = getClock();
  1287  000020  ECCC  F002         	call	_getClock	;wreg free
  1288  000024  C00F  F015         	movff	?_getClock,??_LEDFSM
  1289  000028  C010  F016         	movff	?_getClock+1,??_LEDFSM+1
  1290  00002C  C011  F017         	movff	?_getClock+2,??_LEDFSM+2
  1291  000030  C012  F018         	movff	?_getClock+3,??_LEDFSM+3
  1292  000034  EE20 F001          	lfsr	2,1
  1293  000038  5013               	movf	LEDFSM@data,w,c
  1294  00003A  26D9               	addwf	fsr2l,f,c
  1295  00003C  5014               	movf	LEDFSM@data+1,w,c
  1296  00003E  22DA               	addwfc	fsr2h,f,c
  1297  000040  C015  FFDE         	movff	??_LEDFSM,postinc2
  1298  000044  C016  FFDE         	movff	??_LEDFSM+1,postinc2
  1299  000048  C017  FFDE         	movff	??_LEDFSM+2,postinc2
  1300  00004C  C018  FFDD         	movff	??_LEDFSM+3,postdec2
  1301  000050  06D9               	decf	fsr2l,f,c
  1302  000052  06D9               	decf	fsr2l,f,c
  1303  000054  D0AA               	goto	L3
  1304  000056                     l968:
  1305                           
  1306                           ;LEDFSM.c: 19: if(getClock() - data->currentClock >= 488){
  1307  000056  EE20 F001          	lfsr	2,1
  1308  00005A  5013               	movf	LEDFSM@data,w,c
  1309  00005C  26D9               	addwf	fsr2l,f,c
  1310  00005E  5014               	movf	LEDFSM@data+1,w,c
  1311  000060  22DA               	addwfc	fsr2h,f,c
  1312  000062  CFDE F015          	movff	postinc2,??_LEDFSM
  1313  000066  CFDE F016          	movff	postinc2,??_LEDFSM+1
  1314  00006A  CFDE F017          	movff	postinc2,??_LEDFSM+2
  1315  00006E  CFDE F018          	movff	postinc2,??_LEDFSM+3
  1316  000072  1E15               	comf	??_LEDFSM,f,c
  1317  000074  1E16               	comf	??_LEDFSM+1,f,c
  1318  000076  1E17               	comf	??_LEDFSM+2,f,c
  1319  000078  1E18               	comf	??_LEDFSM+3,f,c
  1320  00007A  2A15               	incf	??_LEDFSM,f,c
  1321  00007C  0E00               	movlw	0
  1322  00007E  2216               	addwfc	??_LEDFSM+1,f,c
  1323  000080  2217               	addwfc	??_LEDFSM+2,f,c
  1324  000082  2218               	addwfc	??_LEDFSM+3,f,c
  1325  000084  ECCC  F002         	call	_getClock	;wreg free
  1326  000088  C00F  F019         	movff	?_getClock,??_LEDFSM+4
  1327  00008C  C010  F01A         	movff	?_getClock+1,??_LEDFSM+5
  1328  000090  C011  F01B         	movff	?_getClock+2,??_LEDFSM+6
  1329  000094  C012  F01C         	movff	?_getClock+3,??_LEDFSM+7
  1330  000098  5015               	movf	??_LEDFSM,w,c
  1331  00009A  2419               	addwf	??_LEDFSM+4,w,c
  1332  00009C  6E1D               	movwf	(??_LEDFSM+8)& (0+255),c
  1333  00009E  5016               	movf	??_LEDFSM+1,w,c
  1334  0000A0  201A               	addwfc	??_LEDFSM+5,w,c
  1335  0000A2  6E1E               	movwf	(??_LEDFSM+9)& (0+255),c
  1336  0000A4  5017               	movf	??_LEDFSM+2,w,c
  1337  0000A6  201B               	addwfc	??_LEDFSM+6,w,c
  1338  0000A8  6E1F               	movwf	(??_LEDFSM+10)& (0+255),c
  1339  0000AA  5018               	movf	??_LEDFSM+3,w,c
  1340  0000AC  201C               	addwfc	??_LEDFSM+7,w,c
  1341  0000AE  6E20               	movwf	(??_LEDFSM+11)& (0+255),c
  1342  0000B0  0EE8               	movlw	232
  1343  0000B2  5C1D               	subwf	??_LEDFSM+8,w,c
  1344  0000B4  0E01               	movlw	1
  1345  0000B6  581E               	subwfb	??_LEDFSM+9,w,c
  1346  0000B8  0E00               	movlw	0
  1347  0000BA  581F               	subwfb	??_LEDFSM+10,w,c
  1348  0000BC  0E00               	movlw	0
  1349  0000BE  5820               	subwfb	??_LEDFSM+11,w,c
  1350  0000C0  A0D8               	btfss	status,0,c
  1351  0000C2  D088               	goto	l143
  1352                           
  1353                           ;LEDFSM.c: 20: data->currentClock = getClock();
  1354  0000C4  ECCC  F002         	call	_getClock	;wreg free
  1355  0000C8  C00F  F015         	movff	?_getClock,??_LEDFSM
  1356  0000CC  C010  F016         	movff	?_getClock+1,??_LEDFSM+1
  1357  0000D0  C011  F017         	movff	?_getClock+2,??_LEDFSM+2
  1358  0000D4  C012  F018         	movff	?_getClock+3,??_LEDFSM+3
  1359  0000D8  EE20 F001          	lfsr	2,1
  1360  0000DC  5013               	movf	LEDFSM@data,w,c
  1361  0000DE  26D9               	addwf	fsr2l,f,c
  1362  0000E0  5014               	movf	LEDFSM@data+1,w,c
  1363  0000E2  22DA               	addwfc	fsr2h,f,c
  1364  0000E4  C015  FFDE         	movff	??_LEDFSM,postinc2
  1365  0000E8  C016  FFDE         	movff	??_LEDFSM+1,postinc2
  1366  0000EC  C017  FFDE         	movff	??_LEDFSM+2,postinc2
  1367  0000F0  C018  FFDD         	movff	??_LEDFSM+3,postdec2
  1368  0000F4  06D9               	decf	fsr2l,f,c
  1369  0000F6  06D9               	decf	fsr2l,f,c
  1370                           
  1371                           ;LEDFSM.c: 21: PORTDbits.RD7 = 0;
  1372  0000F8  9E83               	bcf	3971,7,c	;volatile
  1373                           
  1374                           ;LEDFSM.c: 22: data->state = LED_ON;
  1375  0000FA  C013  FFD9         	movff	LEDFSM@data,fsr2l
  1376  0000FE  C014  FFDA         	movff	LEDFSM@data+1,fsr2h
  1377  000102  0E02               	movlw	2
  1378  000104  D057               	goto	L2
  1379  000106                     l976:
  1380                           
  1381                           ;LEDFSM.c: 28: if(getClock() - data->currentClock >= 488){
  1382  000106  EE20 F001          	lfsr	2,1
  1383  00010A  5013               	movf	LEDFSM@data,w,c
  1384  00010C  26D9               	addwf	fsr2l,f,c
  1385  00010E  5014               	movf	LEDFSM@data+1,w,c
  1386  000110  22DA               	addwfc	fsr2h,f,c
  1387  000112  CFDE F015          	movff	postinc2,??_LEDFSM
  1388  000116  CFDE F016          	movff	postinc2,??_LEDFSM+1
  1389  00011A  CFDE F017          	movff	postinc2,??_LEDFSM+2
  1390  00011E  CFDE F018          	movff	postinc2,??_LEDFSM+3
  1391  000122  1E15               	comf	??_LEDFSM,f,c
  1392  000124  1E16               	comf	??_LEDFSM+1,f,c
  1393  000126  1E17               	comf	??_LEDFSM+2,f,c
  1394  000128  1E18               	comf	??_LEDFSM+3,f,c
  1395  00012A  2A15               	incf	??_LEDFSM,f,c
  1396  00012C  0E00               	movlw	0
  1397  00012E  2216               	addwfc	??_LEDFSM+1,f,c
  1398  000130  2217               	addwfc	??_LEDFSM+2,f,c
  1399  000132  2218               	addwfc	??_LEDFSM+3,f,c
  1400  000134  ECCC  F002         	call	_getClock	;wreg free
  1401  000138  C00F  F019         	movff	?_getClock,??_LEDFSM+4
  1402  00013C  C010  F01A         	movff	?_getClock+1,??_LEDFSM+5
  1403  000140  C011  F01B         	movff	?_getClock+2,??_LEDFSM+6
  1404  000144  C012  F01C         	movff	?_getClock+3,??_LEDFSM+7
  1405  000148  5015               	movf	??_LEDFSM,w,c
  1406  00014A  2419               	addwf	??_LEDFSM+4,w,c
  1407  00014C  6E1D               	movwf	(??_LEDFSM+8)& (0+255),c
  1408  00014E  5016               	movf	??_LEDFSM+1,w,c
  1409  000150  201A               	addwfc	??_LEDFSM+5,w,c
  1410  000152  6E1E               	movwf	(??_LEDFSM+9)& (0+255),c
  1411  000154  5017               	movf	??_LEDFSM+2,w,c
  1412  000156  201B               	addwfc	??_LEDFSM+6,w,c
  1413  000158  6E1F               	movwf	(??_LEDFSM+10)& (0+255),c
  1414  00015A  5018               	movf	??_LEDFSM+3,w,c
  1415  00015C  201C               	addwfc	??_LEDFSM+7,w,c
  1416  00015E  6E20               	movwf	(??_LEDFSM+11)& (0+255),c
  1417  000160  0EE8               	movlw	232
  1418  000162  5C1D               	subwf	??_LEDFSM+8,w,c
  1419  000164  0E01               	movlw	1
  1420  000166  581E               	subwfb	??_LEDFSM+9,w,c
  1421  000168  0E00               	movlw	0
  1422  00016A  581F               	subwfb	??_LEDFSM+10,w,c
  1423  00016C  0E00               	movlw	0
  1424  00016E  5820               	subwfb	??_LEDFSM+11,w,c
  1425  000170  A0D8               	btfss	status,0,c
  1426  000172  D030               	goto	l143
  1427                           
  1428                           ;LEDFSM.c: 29: data->currentClock = getClock();
  1429  000174  ECCC  F002         	call	_getClock	;wreg free
  1430  000178  C00F  F015         	movff	?_getClock,??_LEDFSM
  1431  00017C  C010  F016         	movff	?_getClock+1,??_LEDFSM+1
  1432  000180  C011  F017         	movff	?_getClock+2,??_LEDFSM+2
  1433  000184  C012  F018         	movff	?_getClock+3,??_LEDFSM+3
  1434  000188  EE20 F001          	lfsr	2,1
  1435  00018C  5013               	movf	LEDFSM@data,w,c
  1436  00018E  26D9               	addwf	fsr2l,f,c
  1437  000190  5014               	movf	LEDFSM@data+1,w,c
  1438  000192  22DA               	addwfc	fsr2h,f,c
  1439  000194  C015  FFDE         	movff	??_LEDFSM,postinc2
  1440  000198  C016  FFDE         	movff	??_LEDFSM+1,postinc2
  1441  00019C  C017  FFDE         	movff	??_LEDFSM+2,postinc2
  1442  0001A0  C018  FFDD         	movff	??_LEDFSM+3,postdec2
  1443  0001A4  06D9               	decf	fsr2l,f,c
  1444  0001A6  06D9               	decf	fsr2l,f,c
  1445                           
  1446                           ;LEDFSM.c: 30: PORTDbits.RD7 = 1;
  1447  0001A8  8E83               	bsf	3971,7,c	;volatile
  1448  0001AA                     L3:
  1449                           
  1450                           ;LEDFSM.c: 31: data->state = LED_OFF;
  1451  0001AA  C013  FFD9         	movff	LEDFSM@data,fsr2l
  1452  0001AE  C014  FFDA         	movff	LEDFSM@data+1,fsr2h
  1453  0001B2  0E01               	movlw	1
  1454  0001B4                     L2:
  1455  0001B4  6EDF               	movwf	indf2,c
  1456  0001B6  D00E               	goto	l143
  1457  0001B8                     l986:
  1458  0001B8  C013  FFD9         	movff	LEDFSM@data,fsr2l
  1459  0001BC  C014  FFDA         	movff	LEDFSM@data+1,fsr2h
  1460  0001C0  50DF               	movf	indf2,w,c
  1461                           
  1462                           ; Switch size 1, requested type "space"
  1463                           ; Number of cases is 3, Range of values is 0 to 2
  1464                           ; switch strategies available:
  1465                           ; Name         Instructions Cycles
  1466                           ; simple_byte           10     6 (average)
  1467                           ;	Chosen strategy is simple_byte
  1468  0001C2  0A00               	xorlw	0	; case 0
  1469  0001C4  B4D8               	btfsc	status,2,c
  1470  0001C6  D72B               	goto	l136
  1471  0001C8  0A01               	xorlw	1	; case 1
  1472  0001CA  B4D8               	btfsc	status,2,c
  1473  0001CC  D744               	goto	l968
  1474  0001CE  0A03               	xorlw	3	; case 2
  1475  0001D0  B4D8               	btfsc	status,2,c
  1476  0001D2  D799               	goto	l976
  1477  0001D4                     l143:
  1478  0001D4  0012               	return	
  1479  0001D6                     __end_of_LEDFSM:
  1480                           	opt stack 0
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           intcon	equ	0xFF2
  1486                           postinc0	equ	0xFEE
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           indf2	equ	0xFDF
  1490                           postinc2	equ	0xFDE
  1491                           postdec2	equ	0xFDD
  1492                           fsr2h	equ	0xFDA
  1493                           fsr2l	equ	0xFD9
  1494                           status	equ	0xFD8
  1495                           
  1496 ;; *************** function _getClock *****************
  1497 ;; Defined at:
  1498 ;;		line 17 in file "../src/PIC18/clock.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;		None
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  4   14[COMRAM] unsigned long 
  1505 ;; Registers used:
  1506 ;;		None
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1512 ;;      Params:         4       0       0       0       0       0       0
  1513 ;;      Locals:         0       0       0       0       0       0       0
  1514 ;;      Temps:          0       0       0       0       0       0       0
  1515 ;;      Totals:         4       0       0       0       0       0       0
  1516 ;;Total ram usage:        4 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    3
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_sevenSegmentSM
  1523 ;;		_LEDFSM
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text11
  1528  000598                     __ptext11:
  1529                           	opt stack 0
  1530  000598                     _getClock:
  1531                           	opt stack 26
  1532                           
  1533                           ;clock.c: 22: return clock;
  1534                           
  1535                           ;incstack = 0
  1536  000598  C03D  F00F         	movff	_clock,?_getClock
  1537  00059C  C03E  F010         	movff	_clock+1,?_getClock+1
  1538  0005A0  C03F  F011         	movff	_clock+2,?_getClock+2
  1539  0005A4  C040  F012         	movff	_clock+3,?_getClock+3
  1540  0005A8  0012               	return	
  1541  0005AA                     __end_of_getClock:
  1542                           	opt stack 0
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           intcon	equ	0xFF2
  1548                           postinc0	equ	0xFEE
  1549                           postdec1	equ	0xFE5
  1550                           fsr1l	equ	0xFE1
  1551                           indf2	equ	0xFDF
  1552                           postinc2	equ	0xFDE
  1553                           postdec2	equ	0xFDD
  1554                           fsr2h	equ	0xFDA
  1555                           fsr2l	equ	0xFD9
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _interruptISR *****************
  1559 ;; Defined at:
  1560 ;;		line 4 in file "../src/PIC18/Interrupt.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;		None
  1565 ;; Return value:  Size  Location     Type
  1566 ;;		None               void
  1567 ;; Registers used:
  1568 ;;		wreg, status,2, status,0, cstack
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1574 ;;      Params:         0       0       0       0       0       0       0
  1575 ;;      Locals:         0       0       0       0       0       0       0
  1576 ;;      Temps:         14       0       0       0       0       0       0
  1577 ;;      Totals:        14       0       0       0       0       0       0
  1578 ;;Total ram usage:       14 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:    2
  1581 ;; This function calls:
  1582 ;;		_timer0ISR
  1583 ;; This function is called by:
  1584 ;;		Interrupt level 2
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	intcode
  1589  000008                     __pintcode:
  1590                           	opt stack 0
  1591  000008                     _interruptISR:
  1592                           	opt stack 26
  1593                           
  1594                           ;incstack = 0
  1595  000008  CFFA F001          	movff	pclath,??_interruptISR
  1596  00000C  CFFB F002          	movff	pclatu,??_interruptISR+1
  1597  000010  CFE9 F003          	movff	fsr0l,??_interruptISR+2
  1598  000014  EDBF  F001         	call	int_func,f	;refresh shadow registers
  1599                           pclatu	equ	0xFFB
  1600                           pclath	equ	0xFFA
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           intcon	equ	0xFF2
  1606                           postinc0	equ	0xFEE
  1607                           fsr0l	equ	0xFE9
  1608                           postdec1	equ	0xFE5
  1609                           fsr1l	equ	0xFE1
  1610                           indf2	equ	0xFDF
  1611                           postinc2	equ	0xFDE
  1612                           postdec2	equ	0xFDD
  1613                           fsr2h	equ	0xFDA
  1614                           fsr2l	equ	0xFD9
  1615                           status	equ	0xFD8
  1616                           
  1617                           	psect	intcode_body
  1618  00037E                     __pintcode_body:
  1619                           	opt stack 26
  1620  00037E                     int_func:
  1621                           	opt stack 26
  1622  00037E  0006               	pop		; remove dummy address from shadow register refresh
  1623  000380  CFEA F004          	movff	fsr0h,??_interruptISR+3
  1624  000384  CFE1 F005          	movff	fsr1l,??_interruptISR+4
  1625  000388  CFE2 F006          	movff	fsr1h,??_interruptISR+5
  1626  00038C  CFD9 F007          	movff	fsr2l,??_interruptISR+6
  1627  000390  CFDA F008          	movff	fsr2h,??_interruptISR+7
  1628  000394  CFF3 F009          	movff	prodl,??_interruptISR+8
  1629  000398  CFF4 F00A          	movff	prodh,??_interruptISR+9
  1630  00039C  CFF6 F00B          	movff	tblptrl,??_interruptISR+10
  1631  0003A0  CFF7 F00C          	movff	tblptrh,??_interruptISR+11
  1632  0003A4  CFF8 F00D          	movff	tblptru,??_interruptISR+12
  1633  0003A8  CFF5 F00E          	movff	tablat,??_interruptISR+13
  1634                           
  1635                           ;Interrupt.c: 5: timer0ISR();
  1636  0003AC  ECD5  F002         	call	_timer0ISR	;wreg free
  1637  0003B0  C00E  FFF5         	movff	??_interruptISR+13,tablat
  1638  0003B4  C00D  FFF8         	movff	??_interruptISR+12,tblptru
  1639  0003B8  C00C  FFF7         	movff	??_interruptISR+11,tblptrh
  1640  0003BC  C00B  FFF6         	movff	??_interruptISR+10,tblptrl
  1641  0003C0  C00A  FFF4         	movff	??_interruptISR+9,prodh
  1642  0003C4  C009  FFF3         	movff	??_interruptISR+8,prodl
  1643  0003C8  C008  FFDA         	movff	??_interruptISR+7,fsr2h
  1644  0003CC  C007  FFD9         	movff	??_interruptISR+6,fsr2l
  1645  0003D0  C006  FFE2         	movff	??_interruptISR+5,fsr1h
  1646  0003D4  C005  FFE1         	movff	??_interruptISR+4,fsr1l
  1647  0003D8  C004  FFEA         	movff	??_interruptISR+3,fsr0h
  1648  0003DC  C003  FFE9         	movff	??_interruptISR+2,fsr0l
  1649  0003E0  C002  FFFB         	movff	??_interruptISR+1,pclatu
  1650  0003E4  C001  FFFA         	movff	??_interruptISR,pclath
  1651  0003E8  0011               	retfie		f
  1652  0003EA                     __end_of_interruptISR:
  1653                           	opt stack 0
  1654                           pclatu	equ	0xFFB
  1655                           pclath	equ	0xFFA
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           intcon	equ	0xFF2
  1663                           postinc0	equ	0xFEE
  1664                           fsr0h	equ	0xFEA
  1665                           fsr0l	equ	0xFE9
  1666                           postdec1	equ	0xFE5
  1667                           fsr1h	equ	0xFE2
  1668                           fsr1l	equ	0xFE1
  1669                           indf2	equ	0xFDF
  1670                           postinc2	equ	0xFDE
  1671                           postdec2	equ	0xFDD
  1672                           fsr2h	equ	0xFDA
  1673                           fsr2l	equ	0xFD9
  1674                           status	equ	0xFD8
  1675                           
  1676 ;; *************** function _timer0ISR *****************
  1677 ;; Defined at:
  1678 ;;		line 24 in file "../src/PIC18/clock.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;		None
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;		None
  1683 ;; Return value:  Size  Location     Type
  1684 ;;		None               void
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1692 ;;      Params:         0       0       0       0       0       0       0
  1693 ;;      Locals:         0       0       0       0       0       0       0
  1694 ;;      Temps:          0       0       0       0       0       0       0
  1695 ;;      Totals:         0       0       0       0       0       0       0
  1696 ;;Total ram usage:        0 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    1
  1699 ;; This function calls:
  1700 ;;		_clearTimer0OverflowFlag
  1701 ;; This function is called by:
  1702 ;;		_interruptISR
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text13
  1707  0005AA                     __ptext13:
  1708                           	opt stack 0
  1709  0005AA                     _timer0ISR:
  1710                           	opt stack 26
  1711                           
  1712                           ;clock.c: 25: clock++;
  1713                           
  1714                           ;incstack = 0
  1715  0005AA  0E01               	movlw	1
  1716  0005AC  263D               	addwf	_clock,f,c
  1717  0005AE  0E00               	movlw	0
  1718  0005B0  223E               	addwfc	_clock+1,f,c
  1719  0005B2  223F               	addwfc	_clock+2,f,c
  1720  0005B4  2240               	addwfc	_clock+3,f,c
  1721                           
  1722                           ;clock.c: 26: clearTimer0OverflowFlag();
  1723  0005B6  ECF0  F002         	call	_clearTimer0OverflowFlag	;wreg free
  1724  0005BA  0012               	return	
  1725  0005BC                     __end_of_timer0ISR:
  1726                           	opt stack 0
  1727                           pclatu	equ	0xFFB
  1728                           pclath	equ	0xFFA
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           prodh	equ	0xFF4
  1734                           prodl	equ	0xFF3
  1735                           intcon	equ	0xFF2
  1736                           postinc0	equ	0xFEE
  1737                           fsr0h	equ	0xFEA
  1738                           fsr0l	equ	0xFE9
  1739                           postdec1	equ	0xFE5
  1740                           fsr1h	equ	0xFE2
  1741                           fsr1l	equ	0xFE1
  1742                           indf2	equ	0xFDF
  1743                           postinc2	equ	0xFDE
  1744                           postdec2	equ	0xFDD
  1745                           fsr2h	equ	0xFDA
  1746                           fsr2l	equ	0xFD9
  1747                           status	equ	0xFD8
  1748                           
  1749 ;; *************** function _clearTimer0OverflowFlag *****************
  1750 ;; Defined at:
  1751 ;;		line 38 in file "../src/PIC18/clock.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;		None               void
  1758 ;; Registers used:
  1759 ;;		None
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1765 ;;      Params:         0       0       0       0       0       0       0
  1766 ;;      Locals:         0       0       0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0
  1768 ;;      Totals:         0       0       0       0       0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_timer0ISR
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text14
  1779  0005E0                     __ptext14:
  1780                           	opt stack 0
  1781  0005E0                     _clearTimer0OverflowFlag:
  1782                           	opt stack 26
  1783                           
  1784                           ;clock.c: 39: INTCONbits.TMR0IF = 0;
  1785                           
  1786                           ;incstack = 0
  1787  0005E0  94F2               	bcf	intcon,2,c	;volatile
  1788  0005E2  0012               	return	
  1789  0005E4                     __end_of_clearTimer0OverflowFlag:
  1790                           	opt stack 0
  1791  0000                     pclatu	equ	0xFFB
  1792                           pclath	equ	0xFFA
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           prodh	equ	0xFF4
  1798                           prodl	equ	0xFF3
  1799                           intcon	equ	0xFF2
  1800                           postinc0	equ	0xFEE
  1801                           fsr0h	equ	0xFEA
  1802                           fsr0l	equ	0xFE9
  1803                           postdec1	equ	0xFE5
  1804                           fsr1h	equ	0xFE2
  1805                           fsr1l	equ	0xFE1
  1806                           indf2	equ	0xFDF
  1807                           postinc2	equ	0xFDE
  1808                           postdec2	equ	0xFDD
  1809                           fsr2h	equ	0xFDA
  1810                           fsr2l	equ	0xFD9
  1811                           status	equ	0xFD8
  1812                           pclatu	equ	0xFFB
  1813                           pclath	equ	0xFFA
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           intcon	equ	0xFF2
  1821                           postinc0	equ	0xFEE
  1822                           fsr0h	equ	0xFEA
  1823                           fsr0l	equ	0xFE9
  1824                           postdec1	equ	0xFE5
  1825                           fsr1h	equ	0xFE2
  1826                           fsr1l	equ	0xFE1
  1827                           indf2	equ	0xFDF
  1828                           postinc2	equ	0xFDE
  1829                           postdec2	equ	0xFDD
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834                           	psect	rparam
  1835  0000                     pclatu	equ	0xFFB
  1836                           pclath	equ	0xFFA
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           intcon	equ	0xFF2
  1844                           postinc0	equ	0xFEE
  1845                           fsr0h	equ	0xFEA
  1846                           fsr0l	equ	0xFE9
  1847                           postdec1	equ	0xFE5
  1848                           fsr1h	equ	0xFE2
  1849                           fsr1l	equ	0xFE1
  1850                           indf2	equ	0xFDF
  1851                           postinc2	equ	0xFDE
  1852                           postdec2	equ	0xFDD
  1853                           fsr2h	equ	0xFDA
  1854                           fsr2l	equ	0xFD9
  1855                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     44      65
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LEDFSM@data	PTR struct LEDData size(2) Largest target is 5
		 -> main@ledData(COMRAM[5]), 

    LEDInit@data	PTR struct LEDData size(2) Largest target is 5
		 -> main@ledData(COMRAM[5]), 

    sevenSegmentSM@data	PTR struct SPIData size(2) Largest target is 7
		 -> main@spiData(COMRAM[7]), 

    startSPI@data	PTR struct SPIData size(2) Largest target is 7
		 -> main@spiData(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_LEDFSM
    _main->_sevenSegmentSM
    _sevenSegmentSM->_getClock
    _initClock->_OpenTimer0
    _LEDFSM->_getClock

Critical Paths under _interruptISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0     961
                                             32 COMRAM    12    12      0
                             _LEDFSM
                            _LEDInit
                            _OpenSPI
                          _OpenUSART
                          _initClock
                     _sevenSegmentSM
                           _startSPI
 ---------------------------------------------------------------------------------
 (1) _startSPI                                             2     0      2      58
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentSM                                      14    12      2     238
                                             18 COMRAM    14    12      2
                           _WriteSPI
                           _getClock
 ---------------------------------------------------------------------------------
 (2) _WriteSPI                                             2     2      0      15
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initClock                                            0     0      0      30
                         _OpenTimer0
                    _enableInterrupt
 ---------------------------------------------------------------------------------
 (2) _enableInterrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      30
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            6     4      2     193
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _OpenSPI                                              3     1      2     146
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              2     0      2      58
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LEDFSM                                              14    12      2     178
                                             18 COMRAM    14    12      2
                           _getClock
 ---------------------------------------------------------------------------------
 (2) _getClock                                             4     0      4       0
                                             14 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptISR                                        14    14      0       0
                                              0 COMRAM    14    14      0
                          _timer0ISR
 ---------------------------------------------------------------------------------
 (4) _timer0ISR                                            0     0      0       0
            _clearTimer0OverflowFlag
 ---------------------------------------------------------------------------------
 (5) _clearTimer0OverflowFlag                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LEDFSM
     _getClock
   _LEDInit
   _OpenSPI
   _OpenUSART
   _initClock
     _OpenTimer0
     _enableInterrupt
   _sevenSegmentSM
     _WriteSPI
     _getClock
   _startSPI

 _interruptISR (ROOT)
   _timer0ISR
     _clearTimer0OverflowFlag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2C      41       1       51.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      41      15        0.0%
DATA                 0      0      41       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Nov 03 13:45:18 2014

                     _SSPSTATbits 000FC7                                l40 04DE  
                              l43 04E0                                l46 04FA  
                              l95 037C                               l205 054A  
                             l206 054C                               l143 01D4  
                             l231 040C                               l136 001E  
                             l240 0450                               l235 0420  
                             l172 0486                               l236 0422  
                             l173 04A4                               l237 042C  
                             l174 048C                               l166 0466  
                             l238 042E                               l190 0580  
                             l175 0490                               l168 046A  
                             l169 046C                               l188 0584  
                             l942 0494                               l938 0470  
                             l990 01D8                               l976 0106  
                             l968 0056                               l896 040E  
                             l888 0400                               l986 01B8  
                             l998 0254                               fsr2 000FD9  
                     main@ledData 0021                      __CFG_LVP$OFF 000000  
                 __end_of_LEDInit 05DC                      __CFG_WDT$OFF 000000  
                            l1012 0366                              l1008 0358  
                   __CFG_DEBUG$ON 000000                      __CFG_PWRT$ON 000000  
                            _main 04AC                       main@spiData 0026  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
                 _enableInterrupt 05DC                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                     LEDInit@data 000F                   __end_of_OpenSPI 04AC  
                           ?_main 0001                             _T0CON 000FD5  
                           _RCREG 000FAE                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                           _SPBRG 000FAF                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _clock 003D  
                           tablat 000FF5                             status 000FD8  
                 __initialization 04FC                      __end_of_main 04FC  
                          ??_main 0021                      startSPI@data 000F  
                   __activetblptr 000002                         ??_LEDInit 0011  
         __end_of_enableInterrupt 05E0                  __end_of_WriteSPI 0586  
                          _LEDFSM 001C                        _OpenTimer0 0530  
                          _SPBRGH 000FB0                            _SSPBUF 000FC9  
                __end_of_getClock 05AA                         ??_OpenSPI 0011  
              __size_of_OpenUSART 0068                  OpenTimer0@config 000F  
                          _number 002D                   WriteSPI@TempVar 000F  
                    __pdataCOMRAM 002D                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                __end_of_startSPI 0598                        __accesstop 0080  
         __end_of__initialization 0526          ?_clearTimer0OverflowFlag 0001  
                  __pcstackCOMRAM 0001                     ?_interruptISR 0001  
               __end_of_OpenUSART 0452                  ?_enableInterrupt 0001  
                         ?_LEDFSM 0013                       ?_OpenTimer0 0001  
              __size_of_initClock 001E                    ??_interruptISR 0001  
                       ?_WriteSPI 0001                __size_of_timer0ISR 0012  
                         _LEDInit 05CC           __size_of_sevenSegmentSM 01A8  
                       ?_getClock 000F                           _SSPCON1 000FC6  
                         _SSPSTAT 000FC7                   __size_of_LEDFSM 01BA  
                         _OpenSPI 0452                           __Hparam 0000  
                         __Lparam 0000                         ?_startSPI 000F  
                         __pcinit 04FC                           __ramtop 0600  
                      ??_WriteSPI 000F               __size_of_OpenTimer0 0020  
                         __ptext0 04AC                           __ptext1 0586  
                         __ptext2 01D6                           __ptext3 056E  
                         __ptext4 0550                           __ptext5 05DC  
                         __ptext6 0530                           __ptext7 03EA  
                         __ptext8 0452                           __ptext9 05CC  
               __end_of_initClock 056E                         _T0CONbits 000FD5  
                      ??_getClock 0013                    __pintcode_body 037E  
            end_of_initialization 0526                     __Lmediumconst 0000  
                         int_func 037E                 __end_of_timer0ISR 05BC  
                       _RCSTAbits 000FAB                           postdec1 000FE5  
                         postdec2 000FDD                  WriteSPI@data_out 0010  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_startSPI 0011                        LEDFSM@data 0013  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                       _TRISAbits 000F92                         _TRISCbits 000F94  
                       _TRISDbits 000F95              __end_of_interruptISR 03EA  
                  __end_of_LEDFSM 01D6                         _TXSTAbits 000FAC  
                   __pidataCOMRAM 05BC                  OpenSPI@smp_phase 0010  
__size_of_clearTimer0OverflowFlag 0004               start_initialization 04FC  
                  _sevenSegmentSM 01D6                  OpenSPI@sync_mode 0011  
                        ??_LEDFSM 0015                      ??_OpenTimer0 000F  
                       _OpenUSART 03EA                  __CFG_OSC$INTIO67 000000  
              __end_of_OpenTimer0 0550            __end_of_sevenSegmentSM 037E  
                        ?_LEDInit 000F                 __size_of_WriteSPI 0018  
                     __pbssCOMRAM 003D                 __size_of_getClock 0012  
                      ?_OpenUSART 000F                          ?_OpenSPI 000F  
        __size_of_enableInterrupt 0004                         __pintcode 0008  
              sevenSegmentSM@data 0013                 __size_of_startSPI 0012  
           __size_of_interruptISR 03E2                   ?_sevenSegmentSM 0013  
                       _initClock 0550                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                         _timer0ISR 05AA  
                    _interruptISR 0008           _clearTimer0OverflowFlag 05E0  
                 OpenSPI@bus_mode 000F                  __size_of_LEDInit 0010  
                      ?_initClock 0001                         copy_data0 051A  
                     ??_OpenUSART 0011                   OpenUSART@config 0014  
                        __Hrparam 0000                        ?_timer0ISR 0001  
                        __Lrparam 0000                  __size_of_OpenSPI 005A  
               ??_enableInterrupt 000F                          _WriteSPI 056E  
                        _getClock 0598                          __ptext10 001C  
                        __ptext11 0598                          __ptext13 05AA  
                        __ptext14 05E0                     __size_of_main 0050  
       ??_clearTimer0OverflowFlag 0001                          _startSPI 0586  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 000F  
                     ??_initClock 0010                          intlevel2 0000  
                      _OSCCONbits 000FD3                       ??_timer0ISR 0001  
                ??_sevenSegmentSM 0015                       _SSPCON1bits 000FC6  
 __end_of_clearTimer0OverflowFlag 05E4                      _USART_Status 0041  
